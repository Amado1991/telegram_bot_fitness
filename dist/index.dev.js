"use strict";

var TelegramApi = require('node-telegram-bot-api');

var _require = require('./option'),
    keyboard = _require.keyboard,
    again_keyboard = _require.again_keyboard;

require('dotenv').config();

var bot = new TelegramApi(process.env.BOT_TOKEN, {
  polling: true
});
var chats = {};

var start = function start() {
  bot.setMyCommands([{
    command: '/start',
    description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
  }, {
    command: '/schedule',
    description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
  }, {
    command: '/game',
    description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É'
  }]);

  var startGame = function startGame(chatId) {
    var randomNumber;
    return regeneratorRuntime.async(function startGame$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(bot.sendMessage(chatId, '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥—É—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–µ —É–≥–∞–¥–∞—Ç—å!üòé'));

          case 2:
            randomNumber = Math.floor(Math.random() * 10);
            chats[chatId] = randomNumber;
            return _context.abrupt("return", bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π', {
              reply_markup: {
                inline_keyboard: keyboard
              }
            }));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  };

  bot.on('message', function _callee(msg) {
    var text, chatId;
    return regeneratorRuntime.async(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            text = msg.text;
            chatId = msg.chat.id;

            if (!(text == '/start')) {
              _context2.next = 6;
              break;
            }

            _context2.next = 5;
            return regeneratorRuntime.awrap(bot.sendMessage(chatId, "–ú–æ–π —Å–∫—Ä–æ–º–Ω—ã–π –±–æ—Ç –ø–æ–∫–∞ –µ—â–µ –Ω–µ –¥–æ–≤–µ–¥–µ–Ω –¥–æ —É–º–∞. –ù–æ —Å–∫–æ—Ä–æ —Ç—ã –∏–º —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –¶–µ–ª—É—é, –æ–±–Ω–∏–º–∞—éüòòü§óü§≠"));

          case 5:
            return _context2.abrupt("return", bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/76b/77d/76b77dbb-5b99-39f3-904f-ca92ba9af20b/2.webp'));

          case 6:
            if (!(text === '/game')) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", startGame(chatId));

          case 8:
            return _context2.abrupt("return", bot.sendMessage(chatId, msg.chat.first_name + " —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∞ü´†"));

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  bot.on('callback_query', function _callee2(msg) {
    var data, chatId;
    return regeneratorRuntime.async(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            data = msg.data;
            chatId = msg.message.chat.id;

            if (!(data == 'again')) {
              _context3.next = 4;
              break;
            }

            return _context3.abrupt("return", startGame(chatId));

          case 4:
            if (!(data == chats[chatId])) {
              _context3.next = 8;
              break;
            }

            return _context3.abrupt("return", bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâüéâüéâ, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ' + chats[chatId], {
              reply_markup: {
                inline_keyboard: again_keyboard
              }
            }));

          case 8:
            if (!(data !== chats[chatId])) {
              _context3.next = 10;
              break;
            }

            return _context3.abrupt("return", bot.sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É: " + chats[chatId], {
              reply_markup: {
                inline_keyboard: again_keyboard
              }
            }));

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
};

start();